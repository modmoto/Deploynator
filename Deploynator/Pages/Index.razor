@page "/"
@inject IJSRuntime JsRuntime
@inject EventBus _eventBus
@inject DeploymentHandler _handler

<div id="test" class="deploynator-outer-container">
    <div class="deploynator-inner-container">
        <div class="deploy-container">
            <div class="deploy-button-container">
                <div id="deploy-button" @onclick="() => Do(() => _eventBus.OnReleaseButtonTriggered())">
                    <span class="deploy-button-label">Deploy</span>
                </div>
            </div>
        </div>
        <div class="control-container">
            <div class="screens-container">
                <div class="lcd-screen">
                    <span class="release-selection">@(ReleseDef())</span>
                </div>
            </div>
            <div class="buttons-container">
                <div class="buttons-top-row">
                    <div class="control-button invisible"></div>
                    <div class="control-button black active" @onclick="() => Do(() => _handler.Select())">
                        <i class="icon fas fa-check"></i>
                    </div>
                    <div class="control-button invisible"></div>
                </div>
                <div class="buttons-mid-row">
                    <div class="control-button active" @onclick="() => Do(() => _handler.MoveDown())">
                        <i class="icon fas fa-angle-left"></i>
                    </div>
                    <div class="control-button invisible"></div>
                    <div class="control-button active" @onclick="() => Do(() => _handler.MoveU())">
                        <i class="icon fas fa-angle-right"></i>
                    </div>
                </div>
                <div class="buttons-bottom-row">
                    <div class="control-button invisible"></div>
                    <div class="control-button black active" @onclick="() => Do(() => _handler.Deselect())">
                        <i class="icon fas fa-times"></i>
                    </div>
                    <div class="control-button invisible"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="additional-content">
    <div class="row">
        <button class="btn btn-light" @onclick="() => Do(() => _handler.LoadReleases(null, null))">Load Releases</button>

    </div>
    <div class="row">
        <select class="custom-select" @onchange="OnLanguegeChanged" title="Region is required ">
            <option value="Select" selected disabled="disabled">(Choose person)</option>
            @foreach (var language in languages)
            {
                <option value="@language"> @language</option>
            }
        </select>
    </div>
</div>

@code
{
    private List<string> languages = new()
    {
        "en-US-SaraNeural",
        "es-MX-JorgeNeural",
        "de-CH-JanNeural",
        "de-DE-ConradNeural",
        "de-AT-JonasNeural",
        "de-AT-IngridNeural",
        "fr-FR-DeniseNeural",
        "hi-IN-MadhurNeural",
        "hi-IN-SwaraNeural",
        "mr-IN-AarohiNeural",
        "mr-IN-ManoharNeural",
        "en-IN-Heera",
        "en-IN-PriyaRUS",
        "en-IN-Ravi",
        "tr-TR-EmelNeural",
        "tr-TR-AhmetNeural",
    };

    protected override void OnInitialized()
    {
        _eventBus.ReleaseButtonTriggered += (_, _) => InvokeAsync(() => StateHasChanged());
        _eventBus.ReleaseButtonReleased += (_, _) => InvokeAsync(() => StateHasChanged());
        _eventBus.ReleaseLoaded += (_, _) => InvokeAsync(() => StateHasChanged());

        _eventBus.SelectedDeloyment += (_, _) => InvokeAsync(() => StateHasChanged());
        _eventBus.PreselectedDeloyment += (_, _) => InvokeAsync(() => StateHasChanged());
        _eventBus.DownButtonTriggered += (_, _) => InvokeAsync(() => StateHasChanged());
        _eventBus.UpButtonTriggered += (_, _) => InvokeAsync(() => StateHasChanged());
    }


    private void Do(Action action)
    {
        action.Invoke();
        StateHasChanged();
    }

    private void OnLanguegeChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        _eventBus.OnLanguageChanged(value);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JsRuntime.InvokeVoidAsync("attachHandlers");
    }

    private string ReleseDef()
    {
        if (_handler.ReleaseDefinitions.Any())
        {
            var releaseDefinition = _handler.ReleaseDefinitions[_handler.CurrentIndex];
            var releseDef = $"{_handler.CurrentIndex + 1} {releaseDefinition.Name}";
            return _handler.SelectedReleaseDefinitions.Any(r => r.Id == releaseDefinition.Id)
                ? $"X {releseDef}" : releseDef;
        }

        return "No Releases found";
    }
}